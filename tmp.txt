from libc.math cimport fmod, cos, sin, fabs, sqrt

cdef struct Point:
    double x
    double y

cdef double rad(double x):
    return x * 3.1415926535 / 180

cdef double wrapto180(double angle):
    angle = fmod(angle + 180.0, 360.0)
    if angle < 0:
        angle += 360.0
    return angle - 180.0

cpdef Point compute_coordinates(double dt, double a0, double da, double e0,
                                 double de, double I0, double dI, double L0,
                                 double dL, double w0, double dw, double W0,
                                 double dW, double b, double c, double s,
                                 double f):

    cdef double a = a0 + dt * da
    cdef double e = e0 + dt * de
    cdef double I = I0 + dt * dI
    cdef double L = L0 + dt * dL
    cdef double w = w0 + dt * dw
    cdef double W = W0 + dt * dW

    cdef double tol = 10**-6
    cdef double mAnomaly = L - w + b * dt * dt + cos(rad(f * dt)) + s * sin(rad(f * dt))
    mAnomaly = wrapto180(mAnomaly)
    cdef double e_x = 57.29578 * e

    cdef double eAnomaly = mAnomaly - e_x * sin(rad(mAnomaly));
    cdef double dE;
    cdef double dM;

    while(1):
        dM = mAnomaly - (eAnomaly - e_x * sin(rad(eAnomaly)))
        dE = dM / (1.0 - e * cos(rad(eAnomaly)))
        eAnomaly = eAnomaly + dE
        if round(fabs(dE), 10) <= tol:
            break
    
    cdef Point coordinates
    coordinates.x = a * (cos(rad(eAnomaly)) - e)
    coordinates.y = a * sqrt(1 - (e * e)) * sin(rad(eAnomaly))
    return coordinates


import pygame
from modules.Engine import *
from modules.Constants import *
import modules.compute 

class Planet:

    """
    a0, da : semi-major axis [au, au/century]
    e0, de : eccentricity
    I0, dI : inclination [degrees, degrees/century]
    L0, dL : mean longitude [degrees, degrees/century]
    w0, dw (omega): longitude of perihelion [degrees, degrees/century]
    W0, dW (capital omega) : longitude of the ascending node [degrees, degrees/century]
    b, c, s, f additional terms for Jupiter through Neptune
    """

    def __init__(self, far, radius, color, a0, da, e0, de, I0, dI, L0, dL, w0, dw, W0, dW, b, c, s, f, sun=False):
        self.r = radius / 700  # scale down for the animation
        self.far = far
        self.color = color
        self.a0 = a0
        self.da = da
        self.e0 = e0
        self.de = de
        self.I0 = I0
        self.dI = dI
        self.L0 = L0
        self.dL = dL
        self.w0 = w0
        self.dw = dw
        self. W0 = W0
        self.dW = dW

        # additional terms for some bodies
        self.b = b
        self.c = c
        self.s = s
        self.f = f
        self.sun = sun

        self.pos = [Engine.center[0], Engine.center[1]]

        Engine.planet_list.append(self)

    def display(self):
        pygame.draw.circle(Engine.screen, self.color, self.pos, self.r)

    def update(self):

        if self.sun == True:
            pass

        else:

            # double eccentric_anomaly(double period, double dt, double eccentricity) {...} where dt is the time elapsed since perihelion
            coordinates = modules.compute.compute_coordinates(Engine.dt, self.a0, self.da, self.e0, self.de, self.I0, self.dI,
                                                             self.L0, self.dL, self.w0, self.dw, self.W0, self.dW, self.b, self.c, self.s, self.f)
            if not self.far: 
                self.pos[0] = Engine.center[0] + coordinates['x']*150
                self.pos[1] = Engine.center[1] + coordinates['y']*150
            else:
                self.pos[0] = Engine.center[0] + coordinates['x']*30
                self.pos[1] = Engine.center[1] + coordinates['y']*30



import sys
import pygame
from modules.Engine import *
from modules.Planet import *
from modules.Constants import *

pygame.init()
pygame.display.set_caption("Solar System Simulation")
icon = pygame.image.load("files/icon.png")
pygame.display.set_icon(icon)

engine = Engine(1800, 1000)
sun = Planet(False, 6955*3,YELLOW, 0, 0, 0, 0, 0, 0, 0, 0, # radius/33
             0, 0, 0, 0, 0, 0, 0, 0, sun=True)
earth = Planet(False, 6378.137,BLUE, a0=1.00000018, da=-0.00000003,
               e0=0.01673163, de=-0.00003661, I0=-0.00054346, dI=-0.01337178,
               L0=100.46691572, dL=35999.37306329, w0=102.93005885, dw=0.31795260,
               W0=-5.11260389, dW=-0.24123856, b=1, c=1, s=1, f=1)
mars = Planet(False, 3396.2, RED, a0=1.52371243, da=-0.00000097,
              e0=0.09336511, de=0.00009149, I0=1.85181869, dI=-0.00724757,
              L0=-4.56813164, dL=19140.29934243, w0=-23.91744784, dw=0.45223625,
              W0=49.71320984, dW=-0.26852431, b=1, c=1, s=1, f=1)
saturn = Planet(True, 6026*2, BEIGE, a0=9.54149883, da=-0.00003065, # radius/5
                e0=0.05550825, de=-0.00032044, I0=2.49424102, dI=0.00451969,
                L0=50.07571329, dL=1222.11494724, w0=92.86136063, dw=0.54179478,
                W0=113.63998702, dW=-0.25015002, b=0.00025899, c=-0.13434469, s=0.87320147, f=38.351250)
venus = Planet(False, 6051.8, RED, a0=0.72332102, da=-0.00000026,
              e0=0.00676399, de=-0.00005107, I0=3.39777545, dI=0.00043494,
              L0=-181.97970850, dL=58517.81560260, w0=0.05679648, dw=102.93005885,
              W0=-0.27274174, dW=-5.11260389, b=1, c=1, s=1, f=1)

while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            sys.exit()

    engine.render()